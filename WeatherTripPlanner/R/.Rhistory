location = "+10+10",  # Adjust the position
size = 40,            # Adjust the font size
color = "white"       # Adjust the font color
)
meme <- image_annotate(
meme,
"Just 8912056900102984 more packages to install",
location = "-10-10",  # Adjust the position
size = 40,            # Adjust the font size
color = "white"       # Adjust the font color
)
# Display the meme
image_display(meme)
matrix(data = c(1, 8, 21, 2, 10, 24, 3, 12, 27) , 3, 3)
install.packages("magick")
install.packages("magick")
library(magick)
library(ggplot2)
image_path <- "/Users/JasminHagemann/Pictures/meme_picture.png"
meme <- image_read(image_path)
# Add text to the image
meme <- image_annotate(
meme,
"Are we done yet?",
location = "+10+10",
size = 40,
color = "white"
)
meme <- image_annotate(
meme,
"Just 8912056900102984 more packages to install",
location = "-10-10",
size = 40,
color = "white"
)
image_display(meme)
meme (https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg
meme("https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 8912056900102984 more packages to install",
size = 40,
)
meme("https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 8912056900102984 more packages to install",
size = 40
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 8912056900102984 more packages to install",
size = 40
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 8912056900102984 more packages to install",
)
install.packages("meme")
library(meme)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 8912056900102984 more packages to install",
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 8912056900102984 more packages to install",
size = 1
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 8912056900102984 more packages to install",
size = 2
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 89502984 more packages to install",
size = 3
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 89502984 more packages to install",
size = 2.5
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 89502984 more packages to install",
size = 2,5
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 89502984 more packages to install",
size = 2,3
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 89502984 more packages to install",
size = 2, 4
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"Are we done yet?",
"Just 89502984 more packages to install",
size = 2
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"I thought I was done",
"I just had to download the 89502984th package",
size = 2
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"When I thought I was done",
"I just had to download the 89502984th package",
size = 2
)
meme(
"https://brobible.com/wp-content/uploads/2019/11/istock-153696622.jpg",
"When I thought I was done",
"I just had to download the 89502984th package",
size = 2
)
plotstock <- function(stock_symbol = "IMGN", year = "2022", file_name = "IMGN_2022"){
start_date <- paste0(year, "-01-01")
end_date <- paste0(year, "-12-31")
png(file_name)
getSymbols(stock_symbol,
auto.assign = TRUE,
from = start_date,
to = end_date)
chart_Series(Ad(get(noquote(stock_symbol))))
dev.off()
# return (png)
}
plotstock()
plotstock <- function(stock_symbol = "IMGN", year = "2022", file_name = "IMGN_2022"){
start_date <- paste0(year, "-01-01")
end_date <- paste0(year, "-12-31")
png(file_name)
getSymbols(stock_symbol,
auto.assign = TRUE,
from = start_date,
to = end_date)
stock_year <- chart_Series(Ad(get(noquote(stock_symbol))))
dev.off()
return(stock_year)
}
plotstock()
install.packages("shiny")
library (shiny)
runApp('Desktop/PIPS/shiny_example.R')
runApp('Desktop/PIPS/shiny_example_widget.R')
titanic
ChickWeight
ChickWeight
Orange
cars
titanic
titanic_train
Titanic
runApp('Desktop/PIPS/assignments/shiny_datasets.R')
runApp('Desktop/PIPS/assignments/shiny_datasets.R')
ChickWeight
runApp('Desktop/PIPS/assignments/shiny_datasets.R')
ChickWeight
ui <- fluidPage(
titlePanel("Datasets for PIPS Assignments"),
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Select a dataset
selectInput("dataset", "Choose a dataset:",
choices = c("Trees", "Orange","ToothGrowth",
"ChickWeight", "Cars", "Titanic")),
# Input: Specify the number of observations to view
numericInput("obs", "Number of observations to view:", 10),
# Include clarifying text
helpText("Note: The summary is based on the full dataset",
"independent of indicated number of observations"),
# Input: actionButton() to defer the rendering of output
# until the user explicitly clicks the button.
actionButton("update", "Update View")
),
# Main panel for displaying outputs
mainPanel(
# Output: Header + summary of distribution
h4("Summary"),
verbatimTextOutput("summary"),
# Output: Header + table of distribution
h4("Observations"),
tableOutput("view")
)
)
)
d=data.frame(sex=c("m","f"),nr=1:40,score1=rnorm(40,0.5,1),score2=rnorm(40))
t.test?
?t.test
set.seed(1)
d=data.frame(sex=c("m","f"),nr=1:40,score1=rnorm(40,0.5,1),score2=rnorm(40))
# Subset the data for men and women
men_scores <- d$score1[d$sex == "m"]
women_scores <- d$score1[d$sex == "f"]
# Perform one-sided t-test
t_test_result <- t.test(men_scores, women_scores, alternative = "greater")
# Print the test result
print(t_test_result)
# Perform t-test using general linear model approach
t_test_result <- t.test(score1 ~ 1 + sex, data = d, alternative = "greater")
# Print the test result
print(t_test_result)
# Perform t-test using general linear model approach
t_test_result <- t.test(score1 ~ 1 + sex, data = d, alternative = "less")
# Print the test result
print(t_test_result)
t.test(score1 ~ sex,alternative="less", data=d)
t.test(score1 ~ sex,alternative="less", data=d)
t.test(score1 ~ sex,alternative="less", data=d)
data = c(36,40,47,53,26,45,52,38,46,44,36,54,54,49,57,47,29,36,29,37)
t.test(d$score1, d$score2,alternative="two.sided")
t.test(d$score1, d$score2,alternative="two.sided")
t.test(d$score1, d$score2,alternative="two.sided")
mean(data)
sd(data)
qt(data)
length(data)
qt(0.975, df = length(data) - 1)
(se*t(0.975))
t = qt(0.975, df = length(data) - 1)
se*t(0.975)
standard_deviation <- sd(data)
## Calculate the sample size
sample_size <- length(data)
## Calculate the standard error
SE <- standard_deviation / sqrt(sample_size)
## Calculate the margin of error using the critical t-value
critical_t_value <- qt(0.975, df = sample_size - 1)
margin_of_error <- SE * critical_t_value
sample_mean <- mean(data)
# Calculate the lower bound of the confidence interval
lower_bound <- sample_mean - margin_of_error
# Calculate the upper bound of the confidence interval
upper_bound <- sample_mean + margin_of_error
a <- t(x) * x
x <- c(3,4,6,8,8)
a <- t(x) * x
a
x_1 <- c(3,4,6,8,8)
x_2 <- c(2,6,4,7,7)
y <- c(4,3,5,6,9)
X_matrix <- matrix(cbind(rep(1,5), x_1, x_2), ncol = 3)
X <- matrix(cbind(rep(1,5), x_1, x_2), ncol = 3)
t(X) * X
x_1 <- c(3,4,6,8,8)
x_2 <- c(2,6,4,7,7)
y <- c(4,3,5,6,9)
X <- matrix(cbind(rep(1,5), x_1, x_2), ncol = 3)
t(X) %*% X
t(X) %*% y
XTX <- t(X) %*% X
XTY <- t(X) %*% y
beta <- slove(XTX) %*% XTY
beta <- solve(XTX) %*% XTY
beta
health <- read.table("health.txt", header = TRUE)
health <- read.table("health.txt", header = TRUE)
fit <- lm(y ~ x_1 + x_2)
fit
summary(fit)
predict(fit)
yhat <- predict(fit)
s2 <- (t(y-yhat) %*% (y-yhat))
s2
sqrt
sqrt(s2)
s2 <- (t(y-yhat) %*% (y-yhat)) / (5-2-1)
sqrt(s2)
set.seed(1)
d=data.frame(sex=c("m","f"),nr=1:40,score1=rnorm(40,0.5,1),score2=rnorm(40))
View(d)
t.test(d$score1[d$sex == "m"],d$score1[d$sex == "f"], alternative = "greater")
t.test(score1 ~sex, data = d)
t.test(score1 ~sex, alternative = "less", data = d)
t.test(d$score1, d$score2, alternative = "equal")
t.test(d$score1, d$score2)
data = c(36,40,47,53,26,45,52,38,46,44,36,54,54,49,57,47,29,36,29,37)
data = c(36,40,47,53,26,45,52,38,46,44,36,54,54,49,57,47,29,36,29,37)
mean(data)
sd(data)
qt(95)
qt(95, df=df)
qt(0.975, df=df)
dt <- length(data) -1
qt(0.975, df=df)
df <- length(data) -1
qt(0.975, df=df)
se*t(0.975)
sd(data) * qt(0.975, df=df)/sqrt(length(data))
sd(data) * qt(0.975, df=df)/sqrt(length(data))
margin <- sd(data) * qt(0.975, df=df)/sqrt(length(data))
ub <- mean(data) + margin
lb <- mean(data) - margin
up
ub
lb
medical <- read.table("MultipleRegressionData.txt")
medical <- read.table("MultipleRegressionData.txt", header = TRUE)
medical <- read.table("MultipleRegressionData.txt", header = TRUE)
cor(medical)
cor(medical)
medical <- read.table("MultipleRegressionData.txt", header = TRUE)
MEXCA_2017_output <- read.table("54_Bund_2017_output_df.csv", header = TRUE)
MEXCA_2017_output <- read.table("54_Bund_2017_output_df.csv", header = TRUE)
MEXCA_2017_output <- read.csv("54_Bund_2017_output_df.csv", header = TRUE)
MEXCA_2017_output <- read.csv("54_Bund_2017_output_df.csv")
MEXCA_2017_output <- read.table("54_Bund_2017_output_df.csv", header = TRUE)
MEXCA_2017_output <- read.csv("54_Bund_2017_output_df.csv")
install.packages("devtools")
library(devtools)
install_github("Ram-N/weatherData")
library(weatherData)
shinyUI(fluidPage(
# Application title
title="Weather App!",
fluidRow(
column(2,
h4("World Wide Weather"),
wellPanel(
dateInput(inputId = 'date',
label = 'Select Date',
value = Sys.Date()
),
selectInput("select", label = h3("Select Location"),
choices = list("New York" = "NYC", "San Francisco" = "SFO", "London" = "LON")),
selectInput("year", label = h3("Select Year"),
choices = list("2016" = 2016, "2015" = 2015, "2014" = 2014),
selected = 1)
)
),
column(10,
mainPanel("Daily Weather Details over Selected Date",
tabsetPanel(
tabPanel("Temperature", plotOutput("p1")),
tabPanel("Humidity", plotOutput("p2")),
tabPanel("Wind Speed", plotOutput("p3"))
)
)
),
column(10,offset=2,
tabsetPanel("Annual Weather Details",
tabPanel("Mean Temperature", plotOutput("plot1")),
tabPanel("Minimum Temperature", plotOutput("plot2")),
tabPanel("Maximum Temperature", plotOutput("plot3"))
)   )
)
)
)
library(shiny)
shinyUI(fluidPage(
# Application title
title="Weather App!",
fluidRow(
column(2,
h4("World Wide Weather"),
wellPanel(
dateInput(inputId = 'date',
label = 'Select Date',
value = Sys.Date()
),
selectInput("select", label = h3("Select Location"),
choices = list("New York" = "NYC", "San Francisco" = "SFO", "London" = "LON")),
selectInput("year", label = h3("Select Year"),
choices = list("2016" = 2016, "2015" = 2015, "2014" = 2014),
selected = 1)
)
),
column(10,
mainPanel("Daily Weather Details over Selected Date",
tabsetPanel(
tabPanel("Temperature", plotOutput("p1")),
tabPanel("Humidity", plotOutput("p2")),
tabPanel("Wind Speed", plotOutput("p3"))
)
)
),
column(10,offset=2,
tabsetPanel("Annual Weather Details",
tabPanel("Mean Temperature", plotOutput("plot1")),
tabPanel("Minimum Temperature", plotOutput("plot2")),
tabPanel("Maximum Temperature", plotOutput("plot3"))
)   )
)
)
)
shinyUI(fluidPage(
# Application title
title="Weather App!",
fluidRow(
column(2,
h4("World Wide Weather"),
wellPanel(
dateInput(inputId = 'date',
label = 'Select Date',
value = Sys.Date()
),
selectInput("select", label = h3("Select Location"),
choices = list("New York" = "NYC", "San Francisco" = "SFO", "London" = "LON")),
selectInput("year", label = h3("Select Year"),
choices = list("2016" = 2016, "2015" = 2015, "2014" = 2014),
selected = 1)
)
),
column(10,
mainPanel("Daily Weather Details over Selected Date",
tabsetPanel(
tabPanel("Temperature", plotOutput("p1")),
tabPanel("Humidity", plotOutput("p2")),
tabPanel("Wind Speed", plotOutput("p3"))
)
)
),
column(10,offset=2,
tabsetPanel("Annual Weather Details",
tabPanel("Mean Temperature", plotOutput("plot1")),
tabPanel("Minimum Temperature", plotOutput("plot2")),
tabPanel("Maximum Temperature", plotOutput("plot3"))
)   )
)
)
)
ui <- (fluidPage(
# Application title
title="Weather App!",
fluidRow(
column(2,
h4("World Wide Weather"),
wellPanel(
dateInput(inputId = 'date',
label = 'Select Date',
value = Sys.Date()
),
selectInput("select", label = h3("Select Location"),
choices = list("New York" = "NYC", "San Francisco" = "SFO", "London" = "LON")),
selectInput("year", label = h3("Select Year"),
choices = list("2016" = 2016, "2015" = 2015, "2014" = 2014),
selected = 1)
)
),
column(10,
mainPanel("Daily Weather Details over Selected Date",
tabsetPanel(
tabPanel("Temperature", plotOutput("p1")),
tabPanel("Humidity", plotOutput("p2")),
tabPanel("Wind Speed", plotOutput("p3"))
)
)
),
column(10,offset=2,
tabsetPanel("Annual Weather Details",
tabPanel("Mean Temperature", plotOutput("plot1")),
tabPanel("Minimum Temperature", plotOutput("plot2")),
tabPanel("Maximum Temperature", plotOutput("plot3"))
)   )
)
)
)
ui <- fluidPage(
"Hello, world!"
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
library(httr)
library(jsonlite)
library(ggplot2)
library(plotly)
install.packages("tidyquant")
library(tidyquant)
library(scales)
library(dplyr)
install.packages("waiter")
library(waiter)
install.packages("dashboardthemes")
library(dashboardthemes)
runApp('Desktop/GitHub/shiny_example.R')
runApp('Desktop/shiny_app.R')
runApp('Desktop/shiny_app.R')
setwd("~/Desktop/GitHub/hagemann-WeatherTripPlanner/WeatherTripPlanner/R")
runApp('~/Desktop/shiny_app.R')
runApp('~/Desktop/shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('~/Desktop/GitHub/ShinyApp/shiny_v1_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
